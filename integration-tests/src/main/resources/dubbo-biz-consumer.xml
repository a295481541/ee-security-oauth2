<?xml version="1.0" encoding="UTF8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	xsi:noNamespaceSchemaLocation="classpath:xsd/dubbo.xsd"
	xsi:schemaLocation="http://www.springframework.org/schema/beans	http://www.springframework.org/schema/beans/spring-beans-4.2.xsd   
						http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
						http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
						http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
						http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd">
	<!-- 服务消费者(consumer)信息，用于计算依赖关系 -->
	<dubbo:application name="eenet.security.bizProviderMock" />
	<!-- 使用zookeeper注册中心进行注册 -->
	<dubbo:registry protocol="zookeeper" address="${zookeeper.address}" client="curator"/>
	<!-- 启动时检查所有服务的可用性 -->
	<dubbo:consumer check="false" /><!-- 任何服务不可以均会导致系统无法启动 -->
	
	<!-- 安全框架集成配置 -->
	<bean id="ConsumerIdentity" class="com.eenet.authen.ServiceConsumer"><!-- 当前服务消费者身份 -->
		<property name="code" value="5C164336AD3446F9AAE9F306ACE3E1A9" />
		<property name="secretKey" value="ABB76B8CA8F54D4388513024DCB8A340" />
	</bean>
	<bean id="ConsumerInjectFilter" class="com.eenet.extension.dubbo.ConsumerInjectFilter">
		<property name="IdentityBeanId" value="ConsumerIdentity" />
	</bean>
	
	<!-- 业务服务定义 -->
	<dubbo:reference id="MockBizService" interface="com.eenet.test.bizmock.MockBizService" filter="consumerInject" />
</beans>